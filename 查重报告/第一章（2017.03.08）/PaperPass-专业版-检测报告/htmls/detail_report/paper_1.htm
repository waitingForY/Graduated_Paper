<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN""http://www.w3.org/TR/html4/loose.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<title>PaperPass 最权威论文抄袭检测系统</title>
<style type="text/css">
<!--
user_icon {
color: #FFFFFF;
}
html
{
overflow-x:hidden;
overflow-y:auto;
}
body,td,th {
font-family: "微软雅黑";
font-size: 12px;
}
h1,h2,h3,h4,h5,h6 {
font-family: "宋体";
}
p{
margin-bottom:10px;
}
demo_padding {
line-height: 30px;
}
.zhengwen {
padding-right: 15px;
padding-left: 5px;
padding-bottom:100px;
font-size: 13px;
line-height: 20px;
color: #666666;
}
.zhengwencenter {
padding-right: 15px;
padding-left: 0px;
margin-bottom:10px;
font-size: 13px;
line-height: 20px;
color: #666666;
text-align:center
}
.neikuang {
background-color: #EBEBEB;
border: 1px solid #999999;
padding-right: 10px;
padding-left: 10px;
margin-top:10px;
margin-left:25px;
width:300px;
}
.shubu{
height: 20px;
width: 20px;
margin-left:25px;
background-color: #FFFFFF;
border: 1px solid #999999;
text-align: center;
vertical-align: middle;
display: block;
color: #666666;
}
a.red:link {color:#FF0000}
a.red:visited {color:#FF0000}
a.red:hover {color:#000000}
a.red:active {color:#000000}

a.orange:link {color:#FF6600}
a.orange:visited {color:#FF6600}
a.orange:hover {color:#000000}
a.orange:active {color:#000000}

a.dark:link {color:#666666}
a.dark:visited {color:#666666}
a.dark:hover {color:#000000}
a.dark:active {color:#000000}

a.pagelink:hover {color:#000000}
a.pagelink:active {color:#000000}

.green{color:#008000}
.gray{color:#666666}
.red{color:#FF0000}
.orange{color:#FF6600}
a{TEXT-DECORATION:none}

-->
</style>
</head>
<body>


<div class="zhengwen">
<div>
<span style="margin-left:25px"></span>
[
<a class="pagelink" href="paper_1.htm">首页</a>
<a class="pagelink" href="#">上一页</a>
<a class="pagelink" href="paper_2.htm">下一页</a>
<a class="pagelink" href="paper_2.htm">尾页</a>
页码：1/2页
]
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">1</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>第一章绪 论</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">2</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>1.1 研究背景与意义</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">3</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/2/2.htm' target='right' class='red' >近年来，由于云计算[1]、物联网、移动互联、社交媒体等信息技术和应用模式的快速发展，不断地推动人类社会迈向大数据时代。</a><span class='green'>早在2010年，全球的数据量就已经具有 ZB级的规模，有预测显示，到2020年全球的数据量将达到35 ZB，</span><a href='../sentence_detail/4/4.htm' target='right' class='orange' >大量数据无时无刻地影响着人们的生活、工作，甚至是社会的发展和国家经济，大数据时代已经到来。</a><span class='green'>而近年来，有关大数据方面的研究和应用也越来越广泛，新形式下的大数据技术为我们分析问题和解决问题提供了新的思路和方法，其研究已经成为业界的热点。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">4</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>大数据的分析计算模式主要分为批量计算（batch computing）、流式计算（stream computing）、交互式计算（interactive computing）、图形计算（graph computing）等等。</span><span class='green'>其中批量计算和流式计算[2，3，4]这两种计算模式不管是在学术界还是在工业界都是主要的研究模式，同时各自都有广泛的大数据应用场景。</span><span class='green'>其中批量计算是一种适用于大估摸并行批量处理作业的分布式计算模式，也就是我们大家都十分熟悉的MapReduce计算模式。</span><a href='../sentence_detail/9/9.htm' target='right' class='orange' > MapReduce本身是一种编程模型，这种编程思想有着广泛的应用，尤其在大规模数据集的并行计算中，</a><span class='green'>由于其简单易用性的特点使得它成为目前最为流行的大数据并行处理模型[5，6]。</span><a href='../sentence_detail/11/11.htm' target='right' class='orange' >后来，在开源社区的努力下， Hadoop系统[5]应运而生，在 Hadoop系统中包括 HDFS（ hadoop分布式文件系统）和 MapReduce两个核心组件，</a><a href='../sentence_detail/12/12.htm' target='right' class='orange' > HDFS用于存储海量的数据，而 MapReduce是用于海量数据的并行处理。</a><span class='green'>Hadoop平台的应用也十分广泛，国内外许多企业都在用Hadoop平台来进行大数据处理。</span><span class='green'>此外，Spark系统[7]也具备批处理计算的能力。</span><span class='green'>而对于流式数据计算，它是一种对实时性要求极高的计算模式，由于数据的到来是不确定的、无序的、不间断的，</span><span class='green'>为了避免在数据处理过程中造成数据的大量堆积或者数据丢失，这就要求流式计算必须在指定时间限度内对系统所产生的新数据完成实时处理。</span><span class='green'>在许多行业的大数据应用系统中，比如金融银行业的业务监控系统、政府政务管理系统、道路监控系统、互联网行业的访问日志处理等，</span><span class='green'>在这些应用系统中不仅大量累计的历史数据，同时还具有高流量的实时流式数据，因而在提供批处理计算模式的同时，</span><a href='../sentence_detail/19/19.htm' target='right' class='orange' >系统还需要能具备高实时性的流式计算能力。</a><span class='green'>因此，研究和设计一套高效，稳定的流式数据处理模型具有广泛的应用价值，目前也有比较流行的流式计算系统，</span><span class='green'>比如像 Twitter公司的 Storm、 Yahoo公司的 S4以及 Apache Spark Steaming[7]。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">5</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>在传统的流式计算模型中，绝大多数都是利用数据库来实现的，而在大数据时代下的流式计算有了新的需求，表现在低时延、高带宽等。</span><a href='../sentence_detail/23/23.htm' target='right' class='orange' >所以，如何构建一个低时延、高带宽、持续可靠、长期运行的大数据流式计算系统成为了当前亟待解决的问题。</a><span class='green'>Redis这种基于内存计算的、可进行数据持久化的Key-Value存储系统[8]的诞生，为大数据流式计算提供了一个很好的解决方案。</span><span class='green'>Redis数据库最初是为了解决像 SNS类网站在数据存取过程中的实时性等刚性需求的，而传统的关系型数据库越来越难以胜任了，</span><span class='green'>这也使得 Redis这种数据库也越来越受到人们的关注。</span><span class='green'>如今Redis数据库已经得到了广泛的应用，不论是在高速缓存系统中，还是在海量文件的实时检索中，甚至是在如何如荼的各种推荐系统中，Redis都起着举足轻重的作用。</span><span class='green'>Redis基于内存的数据计算和高效的数据存储策略也能够很好的满足实时流计算问题中的低时延的刚性需求。</span><span class='green'>因此，研究redis的内存计算以及存储策略并将其运用到实时流式计算模型中具有重要的意义和实用价值。</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">6</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/30/30.htm' target='right' class='orange' >在流式数据处理中，因为无法确定数据是什么时候到来，按什么顺序到来，因此，不需要事先对流式数据进行存储，</a><a href='../sentence_detail/31/31.htm' target='right' class='red' >而是当流动的数据到来后在内存中直接进行数据的实时计算和分析。</a><a href='../sentence_detail/32/32.htm' target='right' class='red' >就像我们熟悉的Twitter的Storm、Yahoo的S4就是典型的流式数据处理框架，数据在任务拓扑中被计算，最后输出有价值的信息。</a><span class='green'>目前这些流行的流式处理框架都有一个共同的缺点就是，没有一个方便的能够快速根据业务构建数据任务的拓扑计算流程，也就是我们所说的计算流（flow），同时也缺乏数据的流化功能。</span><span class='green'>Node- red本身是 node. js开发的，支持 node. js的事件驱动和非阻塞 IO机制，</span><span class='green'>是一种可视化流程编辑框架[9]，它允许开发人员仅仅使用一个基于浏览器的可视化界面流程编辑器来完成设备、服务器以及 API应用的连接。</span><a href='../sentence_detail/36/36.htm' target='right' class='red' >Node-red本身是IBM Emerging Technology团队创建的一个新型开源工具，它允许用户通过组合各种部件来编写应用程序，这些部件可以是硬件设备、Web API或者是在线服务。</a><span class='green'>Node-red被广泛用于物联网领域，实现数据的流式传输。</span><span class='green'>在 Node- red中从数据的接入，到数据的解析分析，最后到结果的输出都是通过各种各样的节点来完成的，</span><span class='green'>IBM Emerging Technology团队在开发这个工具的时候只引入了少量的具有特殊功能的节点，比如常用的 http节点、 tcp节点、 udp节点、 debug等数据输入输出节点，</span><span class='green'>还有一些用于数据分析的节点比如 sentiment节点，还有一些用于访问存储设备的节点，如 mongodb节点；</span><span class='green'>Node-red除了原始已经提供的这些节点外，还允许用户自己按照开发原则开发自己需要的节点。</span><span class='green'>为了能够充分利用 Node- red的可视化流程编辑的直观性，结合 Rredis数据库的内存计算的特点，</span><a href='../sentence_detail/43/43.htm' target='right' class='orange' >探索开发适应于流式数据分析的数据输入节点、数据输出节点、数据处理节点以及 Redis数据库访问节点，</a><a href='../sentence_detail/44/44.htm' target='right' class='orange' >这对流式数据分析有着重要的实际意义。</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">7</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><span class='green'>1.2 国内外研究现状</span>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">8</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/46/46.htm' target='right' class='orange' >1.2.1 实时流数据处理模型的研究应用现状</a>
</p>
</div>

<div>
<p>
<table border="0" width="100%" cellspacing="0" cellpadding="0">
<tr>
<td align="left" width="50"><div class="shubu">9</div></td>
<td>&nbsp;&nbsp;</td>
</tr>
</table>

<span style="margin-left:25px"></span><a href='../sentence_detail/47/47.htm' target='right' class='orange' >大数据时代下的数据处理主要的两种方式就是实时流数据处理和批量数据处理。</a><a href='../sentence_detail/48/48.htm' target='right' class='orange' >实时流数据处理主要适合于那些无需事先进行数据存储，可以直接进行数据分析处理，实时性要求比较严格，但数据的准确度要求比较宽松的应用场景。</a><a href='../sentence_detail/49/49.htm' target='right' class='orange' >而对于传统的批量数据处理，首先要进行数据的存储，然后再对存储的静态数据进行集中或者分布式计算。</a><a href='../sentence_detail/50/50.htm' target='right' class='orange' >目前，对于传统的批量数据处理模型的技术和研究成果已经相对成熟了，最初有 Google公司的 MapReduce并行编程模型[5]的提出，</a><span class='green'>再有后来在开源社区的努力下开发的 Hadoop系统为代表的批处理系统，都已经是稳定而高效的批处理系统。</span><span class='green'>而对于流式数据处理模型的研究仅仅处于一个初级阶段，在早期关于流式数据的研究也主要集中在以数据库为中心而开展的，</span><a href='../sentence_detail/53/53.htm' target='right' class='orange' >主要是研究了数据计算的流式化，数据规模也比较小，数据对象也比较单一，很难适应在大数据时代下流式数据处理所呈现出来的新特性。</a><a href='../sentence_detail/54/54.htm' target='right' class='orange' >因为，在新时期的流式数据主要呈现出实时性、突发性、无序性等特点，对新的流式计算系统就有了更高更严格的要求。</a>
</p>
</div>


<div>
<span style="margin-left:25px"></span>
[
<a class="pagelink" href="paper_1.htm">首页</a>
<a class="pagelink" href="#">上一页</a>
<a class="pagelink" href="paper_2.htm">下一页</a>
<a class="pagelink" href="paper_2.htm">尾页</a>
页码：1/2页
]
</div>

<br>
<div style="margin-left:8px">

<div style="text-align:center;background-color:#CA122C;margin-top:30px;overflow:hidden;">
<a href="http://www.paperpass.com/publish/index?from=ppreport_banner" target="_blank" style="display:block;"><img height="180" src="http://file.paperpass.com/images/fabiao.jpg"></a>
</div>

</div>
</div>


<div class="zhengwencenter">
<p>
检测报告由<a href="http://www.paperpass.com/" target="_blank">PaperPass</a>文献相似度检测系统生成
</p>
<p>
Copyright © 2007-2017 PaperPass
</p>
</div>
<div style="margin-bottom:400px"></div>
</body>
</html>
