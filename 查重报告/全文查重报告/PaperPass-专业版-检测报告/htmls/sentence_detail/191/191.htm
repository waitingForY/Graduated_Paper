<!DOCTYPE HTML PUBLIC "-//W3C//DTD HTML 4.01 Transitional//EN""http://www.w3.org/TR/html4/loose.dtd">
<html xmlns="http://www.w3.org/1999/xhtml">
<head>
<meta http-equiv="content-type" content="text/html; charset=utf-8" />
<title>PaperPass 最权威论文抄袭检测系统</title>
<style type="text/css">
<!--
user_icon {
color: #FFFFFF;
}
body,td,th {
font-family: "微软雅黑";
font-size: 13px;
}
h1,h2,h3,h4,h5,h6 {
font-family: "宋体";
}
demo_padding {
line-height: 30px;
}
html
{
overflow-x:hidden;
overflow-y:scroll;
}
.liebiao {
border-bottom-width: 1px;
border-bottom-style: dashed;
border-bottom-color: #CCCCCC;
height: 0px;
margin-top:10px;
margin-bottom:10px;
float: left;
width: 90%;
}
.liebiao ul {
list-style-type: none;
display: block;
margin: 0px;
clear: none;
}
.zhengwen {
padding-right: 15px;
padding-left: 0px;
margin-bottom:10px;
font-size: 13px;
line-height: 20px;
color: #666666;
}
.zhengwencenter {
padding-right: 15px;
padding-left: 0px;
margin-bottom:10px;
font-size: 13px;
line-height: 20px;
color: #666666;
text-align:center
}
.neikuang {
background-color: #EBEBEB;
border: 1px dashed #999999;
padding-right: 10px;
padding-left: 10px;
}
.shubu{
float: left;
height: 15px;
width: 15px;
background-color: #FFFFFF;
border: 1px solid #999999;
text-align: center;
vertical-align: middle;
display: block;
font-size: 13px;
}
.kuang {
border: 1px solid #999999;
}
.red{color:#FF0000}
.orange{color:#FF6600}
.green{color:#008000}

a:hover {color:#000000}
a:active {color:#000000}

a{TEXT-DECORATION:none}

-->
</style>
</head>
<body>
<div class="zhengwen"><b>综合<sup>4</sup></b>&nbsp;&nbsp;|&nbsp;&nbsp;<a href="191_local.htm">本地库<sup>4</sup></a>（<a href="191_periodical.htm">期刊<sup>2</sup></a>、<a href="191_thesis.htm">学位<sup>2</sup></a>、<a href="191_conference.htm">会议<sup></sup></a>、<a href="191_book.htm">图书<sup>No</sup></a>）&nbsp;&nbsp;|&nbsp;&nbsp;<a href="191_net.htm">互联网<sup></sup></a><br /></div>
<div class="zhengwen">
语句：<span class='orange' >而在Linux平台上，node.js都是通过自行实现的线程池来完成异步非阻塞I/O的。</span><br><br>
<div style="display:block;">该句相似度：<span class='orange' >45</span>%<a href='#xiugaijianyi' style='padding-left:30px;'>查看该句修改建议</a><b>（轻度相似，请酌情修改）</b><br><br></div>
在本地库和互联网共找出相似内容：4个
</div>

<table width="100%" cellspacing="3" style="margin-bottom:15px;border: 1px solid #C0C0C0" bordercolorlight="#FFFFFF" bordercolordark="#FFFFFF" cellpadding="3">
<tr>
<td align="right" width="100%">
<div class="shubu">1</div>
<font color="#666666">相似度：</font><span class='orange' >45</a><font color="#666">%</font>
</td>
</tr>
<tr>
<td align="left" width="100%">
<font color="#666666">您的句子（灰色背景是与相似句子重合的部分）：</font><br>
<span class='orange' >而在Linux平台上，node.js都是通过自行实现<span style="background:#cbcbcb">的</span>线程池来完成<span style="background:#cbcbcb">异步</span><span style="background:#cbcbcb">非</span><span style="background:#cbcbcb">阻塞</span><span style="background:#cbcbcb">I</span>/<span style="background:#cbcbcb">O</span><span style="background:#cbcbcb">的</span>。</span><br>
</td>
</tr>
<tr>
<td align="left" width="100%">
<font color="#666666">相似句子：</font><br>
<span class="green">存在<span style="background:#cbcbcb">异步</span><span style="background:#cbcbcb">阻塞</span>式<span style="background:#cbcbcb">的</span><span style="background:#cbcbcb">I</span>/<span style="background:#cbcbcb">O</span>。2.3.2同步<span style="background:#cbcbcb">非</span><span style="background:#cbcbcb">阻塞</span><span style="background:#cbcbcb">I</span>/<span style="background:#cbcbcb">O</span>模型同步<span style="background:#cbcbcb">阻塞</span><span style="background:#cbcbcb">I</span>/<span style="background:#cbcbcb">O</span><span style="background:#cbcbcb">的</span></span>
</td>
</tr>
<tr>
<td align="left" width="100%">
<font color="#666666">相似句子原文片段：</font><br>
……），该数据被移动到应用程序的缓冲区中，应用程序是畅通的（读调用返回）。使用阻塞调用，read耗时会比较长。此外，对于单个线程来说，阻塞调用一定会对应同步操作，因此不<span class='green'>存在异步阻塞式的I/O。2.3.2同步非阻塞I/O模型同步阻塞I/O的</span>一种变种是同步非阻塞模型。如下图所示。万方数据同步非阻塞式I/O模型中，I……
</td>
</tr>
<tr>
<td align="left" width="100%">
<font color="#666666">来源(学位论文)：</font><br>
<b>篇名：</b>《Instlink2服务器设计与实现》<br><b>作者：</b>程汉<br><b>分类号：</b>TP368.5<br><b>学科专业：</b>通信与信息系统<br><b>授予学位：</b>硕士<br><b>导师姓名：</b>吴宇红<br><b>学位授予单位：</b>西安电子科技大学<br><b>学位年度：</b>2014<br><b>关键词：</b>即时通信 服务器 信息空间 账号管理
</td>
</tr>
</table>


<table width="100%" cellspacing="3" style="margin-bottom:15px;border: 1px solid #C0C0C0" bordercolorlight="#FFFFFF" bordercolordark="#FFFFFF" cellpadding="3">
<tr>
<td align="right" width="100%">
<div class="shubu">2</div>
<font color="#666666">相似度：</font><span class='orange' >44</a><font color="#666">%</font>
</td>
</tr>
<tr>
<td align="left" width="100%">
<font color="#666666">您的句子（灰色背景是与相似句子重合的部分）：</font><br>
<span class='orange' >而在Linux平台上，node.js都是通过自行实现<span style="background:#cbcbcb">的</span>线程池来完成<span style="background:#cbcbcb">异步</span><span style="background:#cbcbcb">非</span><span style="background:#cbcbcb">阻塞</span><span style="background:#cbcbcb">I</span>/<span style="background:#cbcbcb">O</span><span style="background:#cbcbcb">的</span>。</span><br>
</td>
</tr>
<tr>
<td align="left" width="100%">
<font color="#666666">相似句子：</font><br>
<span class="green">空间再将结果返回给你，那么就是<span style="background:#cbcbcb">异步</span><span style="background:#cbcbcb">I</span>/<span style="background:#cbcbcb">O</span>。<span style="background:#cbcbcb">阻塞</span><span style="background:#cbcbcb">I</span>/<span style="background:#cbcbcb">O</span>和<span style="background:#cbcbcb">非</span><span style="background:#cbcbcb">阻塞</span><span style="background:#cbcbcb">I</span>/<span style="background:#cbcbcb">O</span><span style="background:#cbcbcb">的</span></span>
</td>
</tr>
<tr>
<td align="left" width="100%">
<font color="#666666">相似句子原文片段：</font><br>
……O、I/O复用、信号驱动I/O都是同步I/O，如果实际的I/O读写操作不阻塞请求进程，而是操作系统帮你完成I/O读写，将数据从内核内存区读取到用户<span class='green'>空间再将结果返回给你，那么就是异步I/O。阻塞I/O和非阻塞I/O的</span>区别在于第一步，发起I/O请求是否会被阻塞，如果阻塞直到完成那么就是传统的阻塞I/O……
</td>
</tr>
<tr>
<td align="left" width="100%">
<font color="#666666">来源(学位论文)：</font><br>
<b>篇名：</b>《NIO高性能框架的研究与应用》<br><b>作者：</b>刘蓬<br><b>分类号：</b>TP393<br><b>学科专业：</b>软件工程<br><b>授予学位：</b>硕士<br><b>导师姓名：</b>陈浩<br><b>学位授予单位：</b>湖南大学<br><b>学位年度：</b>2013<br><b>关键词：</b>网络应用 NIO 异步I/O NIO框架
</td>
</tr>
</table>


<table width="100%" cellspacing="3" style="margin-bottom:15px;border: 1px solid #C0C0C0" bordercolorlight="#FFFFFF" bordercolordark="#FFFFFF" cellpadding="3">
<tr>
<td align="right" width="100%">
<div class="shubu">3</div>
<font color="#666666">相似度：</font><span class='orange' >42</a><font color="#666">%</font>
</td>
</tr>
<tr>
<td align="left" width="100%">
<font color="#666666">您的句子（灰色背景是与相似句子重合的部分）：</font><br>
<span class='orange' >而在Linux平台上，node.js都是通过自行实现<span style="background:#cbcbcb">的</span>线程池来完成<span style="background:#cbcbcb">异步</span><span style="background:#cbcbcb">非</span><span style="background:#cbcbcb">阻塞</span><span style="background:#cbcbcb">I</span>/<span style="background:#cbcbcb">O</span><span style="background:#cbcbcb">的</span>。</span><br>
</td>
</tr>
<tr>
<td align="left" width="100%">
<font color="#666666">相似句子：</font><br>
<span class="green">空间再将结果返回给你，那么就是<span style="background:#cbcbcb">异步</span><span style="background:#cbcbcb">I</span>/<span style="background:#cbcbcb">O</span>。<span style="background:#cbcbcb">阻塞</span><span style="background:#cbcbcb">I</span>/<span style="background:#cbcbcb">O</span>和<span style="background:#cbcbcb">非</span><span style="background:#cbcbcb">阻塞</span><span style="background:#cbcbcb">I</span>/<span style="background:#cbcbcb">O</span><span style="background:#cbcbcb">的</span>区别</span>
</td>
</tr>
<tr>
<td align="left" width="100%">
<font color="#666666">相似句子原文片段：</font><br>
……/O、I/O服用、信号驱动I/O都是同步I/O，如果实际的I/O读写操作不阻塞请求进程，而是操作系统帮你完成I/O读写，将数据从内核内存区读取到用户<span class='green'>空间再将结果返回给你，那么就是异步I/O。阻塞I/O和非阻塞I/O的区别</span>在于第一步，发起I/O请求是否会被阻塞，如果阻塞直到完成那么就是传统的阻塞I/O……
</td>
</tr>
<tr>
<td align="left" width="100%">
<font color="#666666">来源(学术期刊)：</font><br>
<b>篇名：</b>《Proactor模式的NIO框架的设计与实现》<br><b>作者：</b>叶柏龙 刘蓬<br><b>作者单位：</b>湖南大学信息科学与工程学院 湖南 长沙410000<br><b>参考文献：</b>11篇<br><b>页码：</b>P110—P113<br><b>页数：</b>4页<br><b>分类号：</b>TP393.09<br><b>基金项目：</b>国家发改委信息安全产品专项基金项目(发改办高技20091886号)；国家创新基金项目(09C26224305084)<br><b>期刊名称：</b>《计算机应用与软件》<br><b>出版时间：</b>2014年9期<br><b>期刊级别：</b>ISTIC<br><b>ISSN：</b>1000-386X<br><b>关键词：</b>网络应用 非阻塞I/O Reactor Proactor<br><b>摘要：</b>为提高Java应用程序在网络I/0上的并发处理能力和处理效率，在阅读和研究现有的NIO框架源码的基础上，指出它存在的不足。结合Java SE7平台提出的异步I/0的新特性，将Proactor模式与Java NIO技术相结合，设计出一种新的网络I/0框架。并发测试的研究结果表明：与现有的主流的NIO框架相比，在同样的系统环境下，优化的网络I/O框架在并发处理能力和处理效率上都有明显的优势。
</td>
</tr>
</table>


<table width="100%" cellspacing="3" style="margin-bottom:15px;border: 1px solid #C0C0C0" bordercolorlight="#FFFFFF" bordercolordark="#FFFFFF" cellpadding="3">
<tr>
<td align="right" width="100%">
<div class="shubu">4</div>
<font color="#666666">相似度：</font><span class='orange' >41</a><font color="#666">%</font>
</td>
</tr>
<tr>
<td align="left" width="100%">
<font color="#666666">您的句子（灰色背景是与相似句子重合的部分）：</font><br>
<span class='orange' >而在Linux平台上，node.js都是<span style="background:#cbcbcb">通过</span>自行<span style="background:#cbcbcb">实现</span><span style="background:#cbcbcb">的</span>线程池来完成<span style="background:#cbcbcb">异步</span><span style="background:#cbcbcb">非</span><span style="background:#cbcbcb">阻塞</span><span style="background:#cbcbcb">I</span>/<span style="background:#cbcbcb">O</span><span style="background:#cbcbcb">的</span>。</span><br>
</td>
</tr>
<tr>
<td align="left" width="100%">
<font color="#666666">相似句子：</font><br>
<span class="green"><span style="background:#cbcbcb">非</span><span style="background:#cbcbcb">阻塞</span><span style="background:#cbcbcb">I</span>/<span style="background:#cbcbcb">O</span><span style="background:#cbcbcb">的</span><span style="background:#cbcbcb">实现</span>，并没有涉及应用层<span style="background:#cbcbcb">的</span><span style="background:#cbcbcb">异步</span>。<span style="background:#cbcbcb">通过</span>操作系统<span style="background:#cbcbcb">的</span><span style="background:#cbcbcb">非</span><span style="background:#cbcbcb">阻塞</span><span style="background:#cbcbcb">I</span>/<span style="background:#cbcbcb">O</span>已经</span>
</td>
</tr>
<tr>
<td align="left" width="100%">
<font color="#666666">相似句子原文片段：</font><br>
……；调用请求LT_J立即逗回调用一结果阵递再次非阻I用请求数据图2epoll执行过程最高的I/O事件通知机制，其示意图如图2。这里的实现只是系统内核层面上对<span class='green'>非阻塞I/O的实现，并没有涉及应用层的异步。通过操作系统的非阻塞I/O已经</span>可以降低CPU的浪费，但是从epoll的执行过程来看，应用层上的方法在等待I/O的过程……
</td>
</tr>
<tr>
<td align="left" width="100%">
<font color="#666666">来源(学术期刊)：</font><br>
<b>篇名：</b>《NodeJS的异步非阻塞I/O研究》<br><b>作者：</b>许会元 何利力<br><b>作者单位：</b>浙江理工大学信息学院,浙江杭州,310018<br><b>参考文献：</b>8篇<br><b>页码：</b>P127—P129<br><b>页数：</b>3页<br><b>期刊名称：</b>《工业控制计算机》<br><b>出版时间：</b>2015年3期<br><b>ISSN：</b>1001-182X<br><b>关键词：</b>web前端 NodeJS 异步I/O<br><b>摘要：</b>NodeJS算得上是如今最火热的技术了,它是一个服务器端JavaScript执行环境,它将改变服务器应该如何工作的概念.它的目标是帮助程序员构建高度可伸缩的应用程序,编写能够处理数万条并发请求的连接代码.除了Web应用外,NodeJS也被应用在许多方面,这些项目涉及到应用程序监控、媒体流、远程控制、桌面和移动应用等等.主要内容包括NodeJS的简单介绍以及对其核心特性异步I/O的研究.
</td>
</tr>
</table>




<div style="display:block;">
<table id="xiugaijianyi" width="100%" cellpadding="3" cellspacing="3" style="margin-bottom:15px;margin-top:15px;border: 1px solid #C0C0C0;"
bordercolorlight="#FFFFFF" bordercolordark="#FFFFFF">
<tbody>
<tr>
<td width="100%">
<div class="green" style="font-size:17px;padding-left:5px;">
该句修改建议（轻度相似，请酌情修改）
</div>
</td>
</tr>
<tr>
<td>
<div class="shubu">
1
</div>
<span style="  padding-left:10px;font-size:15px;">
原句与相似内容重合部分（重点修改标红部分）：
</span>
</td>
</tr>
<tr>
<td>
<font class="green">
而在Linux平台上，node.js都是通过自行实现的线程池来完成<span class="red">异步</span>非<span class="red">阻塞</span>I/O的。
</font>
</td>
</tr>
<tr>
<td>
<div class="shubu">
2
</div>
<span style="  padding-left:10px;font-size:15px;">
同义词：
</span>
</td>
</tr>
<tr>
<td width="100%" align="left">
<span class="red">阻塞：</span><span class="green">壅塞 壅闭 梗阻 </span><br/>
</td>
</tr>
</tbody>
</table>
</div>

<div style="display:block;">
<a href="#">回到顶部</a>
</div>

<div style="margin-bottom:100px"></div>
<div class="zhengwencenter">
<p>
检测报告由<a href="http://www.paperpass.com/" target="_blank">PaperPass</a>文献相似度检测系统生成
</p>
<p>
Copyright © 2007-2017 PaperPass
</p>
</div>
<div style="margin-bottom:700px"></div>
</body>
</html>
